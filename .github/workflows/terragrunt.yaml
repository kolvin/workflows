on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      ci-role-name:
        type: string
        required: false
        description: 'Name of the IAM role to assume'
        default: 'github-ci'
      target-account-id:
        required: true
        type: string
        description: 'A Target AWS Account ID'
      target-region:
        type: string
        required: false
        description: 'A Target AWS Region'

run-name: Deploy ${{ inputs.working-directory }} by @${{ github.actor }}

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Setup Terragrunt & Terragrunt
        run: |
          brew install tfenv warrensbox/tap/tgswitch cowsay
          tfenv install
          tgswitch
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ inputs.target-account-id }}:role/${{ inputs.ci-role-name }}
          aws-region: ${{ inputs.target-region }}
      - name: terragrunt fmt
        id: fmt
        run: terragrunt hclfmt --terragrunt-check || ! cowsay "you fucked up"
        working-directory: ${{ inputs.working-directory }}
      - name: terragrunt init
        id: init
        run: terragrunt init
        working-directory: ${{ inputs.working-directory }}
      - name: cache build
        id: cache-build
        uses: actions/cache@v3
        with:
          key: ${{ github.sha }}-terragrunt-cache
          path: |
            **/.terragrunt-cache/**
            **/.terragrunt.lock.hcl
      - name: terragrunt validate
        id: validate
        run: |
          echo 'validate<<EOF' >> $GITHUB_ENV
          echo "$(terragrunt validate -no-color)" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        working-directory: ${{ inputs.working-directory }}
      - name: terragrunt plan
        if: github.event_name == 'pull_request'
        id: plan
        run: |
          echo 'plan<<EOF' >> $GITHUB_ENV
          echo "$(terragrunt plan -no-color)" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        continue-on-error: true
        working-directory: ${{ inputs.working-directory }}
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terragrunt Format and Style')
            })

            const output = `#### Terragrunt Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terragrunt Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terragrunt Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Validation Output</summary>

            \`\`\`
            ${{ env.validate }}
            \`\`\`

            </details>

            #### Terragrunt Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`
            ${{ env.plan }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: cache plan
        id: cache-plan
        uses: actions/cache@v3
        with:
          key: ${{ github.sha }}-terragrunt-plan
          path: |
            **/tgplan.out
      - name: terragrunt apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: terragrunt apply
        working-directory: ${{ inputs.working-directory }}
